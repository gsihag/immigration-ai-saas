
name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.immigrationai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test -- --watchAll=false
      
      - name: Build for staging
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          VITE_APP_VERSION: ${{ github.sha }}
          NODE_ENV: staging
      
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/immigration-ai-staging
            git pull origin main
            npm ci --production
            npm run build
            pm2 reload immigration-ai-staging
      
      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.immigrationai.com/health || exit 1
      
      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Staging deployment successful'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK != ''

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    needs: [deploy-staging]
    environment:
      name: production
      url: https://immigrationai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run full test suite
        run: |
          npm run test -- --watchAll=false
          npm run test:e2e
        env:
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
      
      - name: Build for production
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
          VITE_APP_VERSION: ${{ github.sha }}
          NODE_ENV: production
      
      - name: Create deployment backup
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/immigration-ai
            mkdir -p backups
            tar -czf backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz dist/
            # Keep only last 5 backups
            cd backups && ls -t | tail -n +6 | xargs rm -f
      
      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/immigration-ai
            git pull origin main
            npm ci --production
            npm run build
            pm2 reload immigration-ai --update-env
      
      - name: Health check
        run: |
          sleep 60
          for i in {1..5}; do
            if curl -f https://immigrationai.com/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done
          echo "Health check failed after 5 attempts"
          exit 1
      
      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/immigration-ai
            # Restore latest backup
            LATEST_BACKUP=$(ls -t backups/backup-*.tar.gz | head -n 1)
            if [ -n "$LATEST_BACKUP" ]; then
              rm -rf dist/
              tar -xzf "$LATEST_BACKUP"
              pm2 reload immigration-ai
              echo "Rollback completed"
            fi
      
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always() && env.SLACK_WEBHOOK != ''

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://staging.immigrationai.com
            https://staging.immigrationai.com/login
            https://staging.immigrationai.com/register
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
