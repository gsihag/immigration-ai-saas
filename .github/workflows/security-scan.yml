
name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - '.github/workflows/security-scan.yml'

env:
  NODE_VERSION: '18'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          npm audit --json > audit-results.json || true
      
      - name: Install security scanning tools
        run: |
          npm install -g safety-cli
          pip install bandit safety
      
      - name: Run Bandit security scan (Python)
        run: |
          find . -name "*.py" -type f > python_files.txt
          if [ -s python_files.txt ]; then
            bandit -r . -f json -o bandit-results.json || true
          else
            echo "No Python files found"
          fi
        continue-on-error: true
      
      - name: Run Safety scan (Python dependencies)
        run: |
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            safety check --json --output safety-results.json || true
          else
            echo "No Python requirements files found"
          fi
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
        continue-on-error: true
      
      - name: Generate Security Report
        run: |
          echo "# Weekly Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## NPM Audit Results" >> security-report.md
          if [ -f "audit-results.json" ]; then
            npm audit --audit-level=info >> security-report.md || true
          else
            echo "No NPM audit results available" >> security-report.md
          fi
          echo "" >> security-report.md
          
          echo "## Snyk Results" >> security-report.md
          if [ -f "snyk-results.json" ]; then
            echo "Snyk scan completed. Check artifacts for detailed results." >> security-report.md
          else
            echo "No Snyk results available" >> security-report.md
          fi
          echo "" >> security-report.md
          
          echo "## Python Security Results" >> security-report.md
          if [ -f "bandit-results.json" ]; then
            echo "Bandit scan completed. Check artifacts for detailed results." >> security-report.md
          else
            echo "No Python files scanned" >> security-report.md
          fi
          
          if [ -f "safety-results.json" ]; then
            echo "Safety scan completed. Check artifacts for detailed results." >> security-report.md
          else
            echo "No Python dependencies scanned" >> security-report.md
          fi
      
      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            security-report.md
            audit-results.json
            snyk-results.json
            bandit-results.json
            safety-results.json
          retention-days: 30
      
      - name: Check for Critical Issues
        run: |
          critical_issues=false
          
          # Check NPM audit for critical issues
          if [ -f "audit-results.json" ]; then
            critical_count=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
            high_count=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
            if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 3 ]; then
              critical_issues=true
              echo "::warning::Found $critical_count critical and $high_count high NPM vulnerabilities"
            fi
          fi
          
          # Set output for notification step
          echo "critical_issues=$critical_issues" >> $GITHUB_OUTPUT
        id: check_issues

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  security-report:
    name: Security Report and Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan]
    if: always()
    
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v3
        with:
          name: security-scan-results
        continue-on-error: true
      
      - name: Generate Final Report
        run: |
          echo "# Immigration AI Security Scan Summary" > final-security-report.md
          echo "" >> final-security-report.md
          echo "**Date:** $(date)" >> final-security-report.md
          echo "**Repository:** ${{ github.repository }}" >> final-security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> final-security-report.md
          echo "" >> final-security-report.md
          
          echo "## Scan Results Summary" >> final-security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> final-security-report.md
          echo "- Code Scan: ${{ needs.code-scan.result }}" >> final-security-report.md
          echo "" >> final-security-report.md
          
          if [ -f "security-report.md" ]; then
            echo "## Detailed Results" >> final-security-report.md
            cat security-report.md >> final-security-report.md
          fi
          
          echo "" >> final-security-report.md
          echo "## Next Steps" >> final-security-report.md
          echo "1. Review all identified vulnerabilities" >> final-security-report.md
          echo "2. Update dependencies with security patches" >> final-security-report.md
          echo "3. Address any code-level security issues" >> final-security-report.md
          echo "4. Re-run scans to verify fixes" >> final-security-report.md
      
      - name: Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: weekly-security-report
          path: final-security-report.md
          retention-days: 90
      
      - name: Notify on Critical Issues
        if: contains(needs.*.result, 'failure') || needs.dependency-scan.outputs.critical_issues == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          title: 'Critical Security Issues Detected'
          text: 'Weekly security scan found critical vulnerabilities that require immediate attention. Check the security report for details.'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
        env:
          SECURITY_SLACK_WEBHOOK: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
      
      - name: Create GitHub Issue for Critical Issues
        if: contains(needs.*.result, 'failure') || needs.dependency-scan.outputs.critical_issues == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const title = `ðŸš¨ Critical Security Issues Found - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Alert
            
            Our weekly security scan has detected critical issues that require immediate attention.
            
            **Scan Date:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            **Run:** ${context.runNumber}
            
            ### Action Required:
            1. Download and review the security report from the workflow artifacts
            2. Address all critical and high-severity vulnerabilities
            3. Update dependencies and apply security patches
            4. Re-run security scans to verify fixes
            
            ### Artifacts:
            - [Security Scan Results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            **This issue was automatically created by the security monitoring system.**
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'automated']
            });
